/**
 * Copyright 2013-2014 Marcos Ferreira and Elthon Oliveira
 * 
 * This file is part of SupervisorD for Healthcare Professional software.
 * 
 *  SupervisorD for Healthcare Professional is free software: you can 
 *  redistribute it and/or modify it under the terms of the GNU General 
 *  Public License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 *  
 *  SupervisorD for Healthcare Professional is distributed in the hope that
 *  it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See 
 *  the GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with SupervisorD for Healthcare Professional. 
 *  If not, see <http://www.gnu.org/licenses/>.
 */
package br.edu.ufcg.supervisor.desktop.windows;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JOptionPane;

//import br.edu.ufcg.supervisor.base.util.BaseUtil;
import br.edu.ufcg.supervisor.desktop.util.Internationalization;

/**
 * Tela salvar modelo de referência. 
 * @author Marcos José, Elthon OLiveira
 */
public class JFrameModelGenerator extends javax.swing.JFrame {
	private static final long serialVersionUID = 292129185740672851L;
	private String automatoJson;
	private WindowsManager gerenciador;

	public JFrameModelGenerator(){ initComponents(); }

	public JFrameModelGenerator(WindowsManager gerenciad){ 
		this.gerenciador = gerenciad; 
		initComponents();
	}

	public void setModeloJson(String automato){ this.automatoJson = automato; }

	/*
	 * Retorna a localidade do arquivo .jar executável.
	 */
	private String getLocalidadeDoJar(){
		String[] te = System.getProperty("user.dir").split("/");
		StringBuffer sb = new StringBuffer();
		sb.append(te[0]);
		//-2 para execução no eclipse
		for (int i = 1; i <= (te.length -1); i++) sb.append("/"+te[i]);
		return sb.toString();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		jButtonCancelar = new javax.swing.JButton();
		jButtonSalvar = new javax.swing.JButton();
		jTextField1 = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setMaximumSize(new java.awt.Dimension(353, 133));
		jButtonCancelar.setText(Internationalization.BT_CANCELAR);
		jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonCancelarActionPerformed(evt);
			}
		});
		jButtonSalvar.setText(Internationalization.BT_SALVAR);
		jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSalvarActionPerformed(evt);
			}
		});
		jLabel1.setText(".sup");
		jLabel2.setText("Choose a name for the reference model file:");
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
			.addContainerGap(25, Short.MAX_VALUE)
			.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(jLabel2).addGroup(layout.createSequentialGroup()
			.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
			.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addGroup(layout.createSequentialGroup()
			.addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addGap(18, 18, 18)
			.addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
			.addGap(3, 3, 3).addComponent(jLabel1))).addContainerGap())
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
			.addContainerGap(26, Short.MAX_VALUE).addComponent(jLabel2).addGap(18, 18, 18)
			.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
			.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addComponent(jLabel1)).addGap(18, 18, 18)
			.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
			.addComponent(jButtonCancelar).addComponent(jButtonSalvar)).addContainerGap())
		);
		pack();
	}

	private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {
		this.setVisible(false);
		gerenciador.initListaAtributos();
		jTextField1.setText("");
	}

	private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			String nomeArquivo = jTextField1.getText();
			BufferedWriter writer = new BufferedWriter(new FileWriter(getLocalidadeDoJar()+"/"+nomeArquivo+".sup"));  
			//automatoJson.replaceAll("_null_", "_11_");
			writer.write( automatoJson );
			writer.flush();  
			writer.close();  
			JOptionPane.showMessageDialog(null,
				Internationalization.MS_OPERACAO_REALIZADA_COM_SUCESSO+"!\n"+ 
				Internationalization.MS_ARQUIVO_SALVO_EM+": "+getLocalidadeDoJar(), "",
				JOptionPane.INFORMATION_MESSAGE, null);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null,	Internationalization.MS_MODELO_NAO_SALVO, "", 
					JOptionPane.ERROR_MESSAGE, null );
			//e.printStackTrace();//TODO GERAR
		}
		jTextField1.setText("");
		this.setVisible(false);
		gerenciador.removeTodosAtributos();
		gerenciador.initListaAtributos();
	}

	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JFrameModelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JFrameModelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JFrameModelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JFrameModelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {	new JFrameModelGenerator().setVisible(true); }
		});
	}
	private javax.swing.JButton jButtonCancelar;
	private javax.swing.JButton jButtonSalvar;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JTextField jTextField1;
}